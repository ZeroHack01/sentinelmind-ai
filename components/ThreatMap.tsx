import React from 'react';

const ThreatMap: React.FC = () => {
    const locations = [
        { id: 'us-west', x: '15%', y: '35%' },
        { id: 'us-east', x: '26%', y: '38%' },
        { id: 'brazil', x: '35%', y: '65%' },
        { id: 'uk', x: '48%', y: '32%' },
        { id: 'germany', x: '52%', y: '34%' },
        { id: 'sa', x: '55%', y: '75%' },
        { id: 'russia', x: '65%', y: '30%' },
        { id: 'india', x: '68%', y: '50%' },
        { id: 'china', x: '75%', y: '40%' },
        { id: 'japan', x: '85%', y: '38%' },
        { id: 'australia', x: '85%', y: '75%' },
    ];

    const arcs = [
        { from: 'china', to: 'us-west', delay: '0s', color: 'text-red-500' },
        { from: 'russia', to: 'germany', delay: '1s', color: 'text-red-500' },
        { from: 'brazil', to: 'us-east', delay: '2s', color: 'text-orange-400' },
        { from: 'japan', to: 'australia', delay: '0.5s', color: 'text-yellow-400' },
        { from: 'uk', to: 'us-east', delay: '1.5s', color: 'text-yellow-400' },
    ];
    
    const getCoords = (id: string) => locations.find(l => l.id === id) || { x: '0', y: '0' };

    return (
        <div className="relative w-full aspect-[2/1] bg-slate-800/30 rounded-lg p-2 overflow-hidden">
            <style>
                {`
                @keyframes arc-animation {
                    0% { stroke-dashoffset: 200; opacity: 1; }
                    80% { stroke-dashoffset: 0; opacity: 1; }
                    100% { stroke-dashoffset: 0; opacity: 0; }
                }
                .arc {
                    stroke-dasharray: 200;
                    stroke-dashoffset: 200;
                    animation: arc-animation 2s ease-in forwards;
                }
                `}
            </style>
            {/* World Map SVG */}
            <svg viewBox="0 0 1000 500" className="w-full h-full" preserveAspectRatio="xMidYMid meet">
                <path d="M500 0L490 20L480 0L490 -20ZM498 4L490 12L482 4L490 -4Z M 990,250 A 495,247.5 0 0 0 10,250 A 495,247.5 0 0 0 990,250 Z" fill="#0f172a" stroke="#06b6d4" strokeWidth="1" />
                <path d="M493,454L493,454L493,454L494,454L495,454L495,453L496,453L496,452L497,452L497,451L498,451L498,450L499,450L499,449L499,448L499,447L499,447L499,446L499,445L499,444L499,443L498,443L498,442L497,442L497,441L496,441L495,441L495,440L494,440L494,439L493,439L493,438L492,438L492,437L491,437L491,436L490,436L490,435L489,435L489,434L488,434L488,433L487,433L487,432L487,431L487,431L487,430L487,429L487,428L487,427L487,426L487,425L488,425L488,424L489,424L489,423L490,423L490,422L491,422L491,421L492,421L492,420L493,420L493,419L494,419L494,418L495,418L495,417L496,417L496,416L497,416L497,415L498,415L498,414L499,414L499,413L500,413L500,412L501,412L501,411L502,411L502,410L503,410L503,409L504,409L504,408L505,408L505,407L506,407L506,406L507,406L507,405L507,404L507,403L507,402L507,401L507,400L507,399L507,398L507,397L507,396L507,395L507,394L506,394L506,393L505,393L505,392L504,392L504,391L503,391L503,390L502,390L502,389L501,389L501,388L500,388L500,387L499,387L499,386L498,386L498,385L497,385L497,384L496,384L496,383L495,383L495,382L494,382L494,381L493,381L493,380L492,380L492,379L491,379L491,378L490,378L490,377L489,377L489,376L488,376L488,375L487,375L487,374L486,374L486,373L485,373L485,372L484,372L484,371L483,371L483,370L482,370L482,369L481,369L481,368L480,368L480,367L479,367L479,366L478,366L478,365L477,365L477,364L476,364L476,363L475,363L475,362L474,362L474,361L473,361L473,360L472,360L472,359L471,359L471,358L470,358L470,357L469,357L469,356L468,356L468,355L467,355L467,354L466,354L466,353L465,353L465,352L464,352L464,351L463,351L463,350L462,350L462,349L461,349L461,348L460,348L460,347L459,347L459,346L458,346L458,345L457,345L457,344L456,344L456,343L455,343L455,342L454,342L454,341L453,341L453,340L452,340L452,339L451,339L451,338L450,338L450,337L449,337L449,336L448,336L448,335L447,335L447,334L446,334L446,333L445,333L445,332L444,332L444,331L443,331L443,330L442,330L442,329L441,329L441,328L440,328L440,327L439,327L439,326L438,326L438,325L437,325L437,324L436,324L436,323L435,323L435,322L434,322L434,321L433,321L433,320L432,320L432,319L431,319L431,318L430,318L430,317L429,317L429,316L428,316L428,315L427,315L427,314L426,314L426,313L425,313L425,312L424,312L424,311L423,311L423,310L422,310L422,309L421,309L421,308L420,308L420,307L419,307L419,306L418,306L418,305L417,305L417,304L416,304L416,303L415,303L415,302L414,302L414,301L413,301L413,300L412,300L412,299L411,299L411,298L410,298L410,297L409,297L409,296L408,296L408,295L407,295L407,294L406,294L406,293L405,293L405,292L404,292L404,291L403,291L403,290L402,290L402,289L401,289L401,288L400,288L400,287L399,287L399,286L398,286L398,285L397,285L397,284L396,284L396,283L395,283L395,282L394,282L394,281L393,281L393,280L392,280L392,279L391,279L391,278L390,278L390,277L389,277L389,276L388,276L388,275L387,275L387,274L386,274L386,273L385,273L385,272L384,272L384,271L383,271L383,270L382,270L382,269L381,269L381,268L380,268L380,267L379,267L379,266L378,266L378,265L377,265L377,264L376,264L376,263L375,263L375,262L374,262L374,261L373,261L373,260L372,260L372,259L371,259L371,258L370,258L370,257L369,257L369,256L368,256L368,255L367,255L367,254L366,254L366,253L365,253L365,252L364,252L364,251L363,251L363,250L362,250L362,249L361,249L361,248L360,248L360,247L359,247L359,246L358,246L358,245L357,245L357,244L356,244L356,243L355,243L355,242L354,242L354,241L353,241L353,240L352,240L352,239L351,239L351,238L350,238L350,237L349,237L349,236L348,236L348,235L347,235L347,234L346,234L346,233L345,233L345,232L344,332L344,331L343,331L343,330L342,330L342,329L341,329L341,328L340,328L340,327L339,327L339,326L338,326L338,325L337,325L337,324L336,324L336,323L335,323L335,322L334,322L334,321L333,321L333,320L332,320L332,319L331,319L331,318L330,318L330,317L329,317L329,316L328,316L328,315L327,315L327,314L326,314L326,313L325,313L325,312L324,312L324,311L323,311L323,310L322,310L322,309L321,309L321,308L320,308L320,307L319,307L319,306L318,306L318,305L317,305L317,304L316,304L316,303L315,303L315,302L314,302L314,301L313,301L313,300L312,300L312,299L311,299L311,298L310,298L310,297L309,297L309,296L308,296L308,295L307,295L307,294L306,294L306,293L305,293L305,292L304,292L304,291L303,291L303,290L302,290L302,289L301,289L301,288L300,288L300,287L299,287L299,286L298,286L298,285L297,285L297,284L296,284L296,283L295,283L295,282L294,282L294,281L293,281L293,280L292,280L292,279L291,279L291,278L290,278L290,277L289,277L289,276L288,276L288,275L287,275L287,274L286,274L286,273L285,273L285,272L284,272L284,271L283,271L283,270L282,270L282,269L281,269L281,268L280,268L280,267L279,267L279,266L278,266L278,265L277,265L277,264L276,264L276,263L275,263L275,262L274,262L274,261L273,261L273,260L272,260L272,159L271,159L271,158L270,158L270,157L269,157L269,156L268,156L268,155L267,155L267,154L266,154L266,153L265,153L265,152L264,152L264,151L263,151L263,150L262,150L262,149L261,149L261,148L260,148L260,147L259,147L259,146L258,146L258,145L257,145L257,144L256,144L256,143L255,143L255,142L254,142L254,141L253,141L253,140L252,140L252,139L251,139L251,138L250,138L250,137L249,137L249,136L248,136L248,135L247,135L247,134L246,134L246,133L245,133L245,132L244,132L244,131L243,131L243,130L242,130L242,129L241,129L241,128L240,128L240,127L239,127L239,126L238,126L238,125L237,125L237,124L236,124L236,123L235,123L235,122L234,122L234,121L233,121L233,120L232,120L232,119L231,119L231,118L230,118L230,117L229,117L229,116L228,116L228,115L227,115L227,114L226,114L226,113L225,113L225,112L224,112L224,111L223,111L223,110L222,110L222,109L221,109L221,108L220,108L220,107L219,107L219,106L218,106L218,105L217,105L217,104L216,104L216,103L215,103L215,102L214,102L214,101L213,101L213,100L212,100L212,99L211,99L211,98L210,98L210,97L209,97L209,96L208,96L208,95L207,95L207,94L206,94L206,93L205,93L205,92L204,92L204,91L203,91L203,90L202,90L202,89L201,89L201,88L200,88L200,87L199,87L199,86L198,86L198,85L197,85L197,84L196,84L196,83L195,83L195,82L194,82L194,81L193,81L193,80L192,80L192,79L191,79L191,78L190,78L190,77L189,77L189,76L188,76L188,75L187,75L187,74L186,74L186,73L185,73L185,72L184,72L184,71L183,71L183,70L182,70L182,69L181,69L181,68L180,68L180,67L179,67L179,66L178,66L178,65L177,65L177,64L176,64L176,63L175,63L175,62L174,62L174,61L173,61L173,60L172,60L172,59L171,59L171,58L170,58L170,57L169,57L169,56L168,56L168,55L167,55L167,54L166,54L166,53L165,53L165,52L164,52L164,51L163,51L163,50L162,50L162,49L161,49L161,48L160,48L160,47L159,47L159,46L158,46L158,45L157,45L157,44L156,44L156,43L155,43L155,42L154,42L154,41L153,41L153,40L152,40L152,39L151,39L151,38L150,38L150,37L149,37L149,36L148,36L148,35L147,35L147,34L146,34L146,33L145,33L145,32L144,32L144,31L143,31L143,30L142,30L142,29L141,29L141,28L140,28L140,27L139,27L139,26L138,26L138,25L137,25L137,24L136,24L136,23L135,23L135,22L134,22L134,21L133,21L133,20L132,20L132,19L131,19L131,18L130,18L130,17L129,17L129,16L128,16L128,15L127,15L127,14L126,14L126,13L125,13L125,12L124,12L124,11L123,11L123,10L122,10L122,9L121,9L121,8L120,8L120,7L119,7L119,6L118,6L118,5L117,5L117,4L116,4L116,3L115,3L115,2L114,2L114,1L113,1L113,0L112,0L111,0L110,0L109,0L108,0L107,0L106,0L105,0L104,0L103,0L102,0L101,0L100,0L99,0L98,0L97,0L96,0L95,0L94,0L93,0L92,0L91,0L90,0L89,0L88,0L87,0L86,0L85,0L84,0L83,0L82,0L81,0L80,0L79,0L78,0L77,0L76,0L75,0L74,0L73,0L72,0L71,0L70,0L69,0L68,0L67,0L66,0L65,0L64,0L63,0L62,0L61,0L60,0L59,0L58,0L57,0L56,0L55,0L54,0L53,0L52,0L51,0L50,0L49,0L48,0L47,0L46,0L45,0L44,0L43,0L42,0L41,0L40,0L39,0L38,0L37,0L36,0L35,0L34,0L33,0L32,0L31,0L30,0L29,0L28,0L27,0L26,0L25,0L24,0L23,0L22,0L21,0L20,0L19,0L18,0L17,0L16,0L15,0L14,0L13,0L12,0L11,0L10,0L9,0L8,0L7,0L6,0L5,0L4,0L3,0L2,0L1,0L0,0 M-500,0L-490,20L-480,0L-490,-20Z M-498,4L-490,12L-482,4L-490,-4Z M -10,250 A 495,247.5 0 0 0 -990,250 A 495,247.5 0 0 0 -10,250 Z" fill="#1e293b" />
            </svg>
            <svg viewBox="0 0 1000 500" className="absolute top-0 left-0 w-full h-full" preserveAspectRatio="xMidYMid meet">
                {/* Location Dots */}
                {locations.map(loc => (
                    <circle key={loc.id} cx={loc.x} cy={loc.y} r="4" fill="#06b6d4" className="opacity-70">
                        <animate attributeName="r" values="4;6;4" dur="2s" repeatCount="indefinite" />
                        <animate attributeName="opacity" values="0.7;1;0.7" dur="2s" repeatCount="indefinite" />
                    </circle>
                ))}
                {/* Arcs */}
                {arcs.map((arc, i) => {
                    const from = getCoords(arc.from);
                    const to = getCoords(arc.to);
                    const fromX = parseFloat(from.x) * 10;
                    const fromY = parseFloat(from.y) * 5;
                    const toX = parseFloat(to.x) * 10;
                    const toY = parseFloat(to.y) * 5;
                    const c1X = fromX + (toX - fromX) * 0.2;
                    const c1Y = fromY - 100;
                    const c2X = fromX + (toX - fromX) * 0.8;
                    const c2Y = fromY - 100;

                    return (
                        <path
                            key={i}
                            d={`M${fromX},${fromY} C${c1X},${c1Y} ${c2X},${c2Y} ${toX},${toY}`}
                            stroke="currentColor"
                            className={`arc ${arc.color}`}
                            strokeWidth="2"
                            fill="none"
                            style={{ animationDelay: arc.delay }}
                        />
                    );
                })}
            </svg>
        </div>
    );
};

export default ThreatMap;